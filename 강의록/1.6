# Variables



 변수 선언 시 `let`, 상수 선언 시 `const` 키워드를 사용한다. `var`도 변수 선언 시 사용할 수 있으나 ES6에서부터는 `let`을 사용한다.

* 변수: `let`

```javascript
let a = 221;
let b = a-5;
a= 4;
console.log(b);
```

* 상수: `const`

```javascript
const c = 3;
c = 4; //TypeError: Assignment to constant variables.
```



 변수 선언 시 기본적으로 `const`를 사용하고, 정말 필요할 때 `let`을 사용한다. 변수명은 camel case 방식으로 작성한다.



# Data Type



 기본적으로 다음의 자료형을 기억하자.

* string

* boolean: 소문자.
* number
* float
* null



 JavaScript는 동적 타이핑 언어이므로, 변수의 데이터 타입을 미리 선언하지 않아도 된다.



# Data Structure



 리스트 데이터를 정렬해야 한다면 Array를, 데이터를 합쳐서 만들어야 한다면 Object를 사용한다.



## Array



 배열. 순차적으로 저장되고, 중복이 가능하며, 인덱스로 접근할 수 있다. 파이썬의 list와 같은 듯?

```javascript
const something = 'something';

const daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']; //array
const arr = [1, true, 'King', null, something];
```



 파이썬에서와 달리, 정의되지 않은 인덱스의 요소에 접근하면, `IndexError`가 아니라, `undefined`가 나온다!

```javascript
console.log(daysOfWeek[432]); //undefined
```



## Object



 키와 값을 갖는 속성들로 이루어진 자료구조. 키는 문자열만, 값은 아무 자료형이나 가능하다. 키는 따옴표를 써도 되고 안 써도 되지만, 띄어쓰기가 들어가는 경우 반드시 따옴표로 감싸 준다. 

```javascript
const myInfo = {
    name: 'Eraser',
    age: 26, 
    gender: 'Female',
    city: 'Incheon',
    favMovies: ['LOTR', 'Oldboy'],
    favFood: [
        {
            name: 'Kimchi', 
            fatty:false
        },
        {
            name:'Burger', 
            fatty:true
        }
    ]     
};

console.log(myInfo.gender);
console.log(myInfo.favFood);
```



 `const`로 선언하면 오브젝트 자체는 변경할 수 없다. 그러나 오브젝트 내 속성의 값은 변경할 수 있다.

```javascript
myInfo.city = 'Bundang'; // 값 변경 가능.
myInfo = true; // 불가능.
```



> *참고* 
>
> 속성의 값이 함수가 되면, 메소드라고 부른다. 





















